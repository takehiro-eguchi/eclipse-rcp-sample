ソートをしたい場合に、どのレイヤで何をすべきかは後ほど確認する。

ドラッグアンドドロップは
http://amateras.osdn.jp/cgi-bin/fswiki/wiki.cgi/swt?page=DnD
を元にして、FileTransferとTextTransferを入れ替える。
→グリッドからグリッドへのDNDは課題が残る。

色の変更等は、Cellのラベルを利用している。
NatTableはフォーカスインやフォーカスアウトのイベントが細かく設定されているので、
そこまで苦労はしないはず。
→AccumlatorとConfiguratorは後ほど。

サーバとのやり取りについて
中央集権的なタブは、直近を取得した後に差分をスロットリングしつつ反映。
Orderなどは、表示ベースで直近を取得し、差分をスロットリングしつつ反映。

ツリーテーブルは、NatTableである程度対応可能。
Eclipseのサンプルで参照可能。
RecordにparentRecordを持たせることでツリー構造を表現できる。
→ツリーテーブルの実現は後ほど確認する。

描画スレッドは、DisplayのasyncExecというものを利用する。
EventListに設定してあげればよい。
テーブルに変更が発生した場合は、FilterListは検知してくれないため、
定期的にFilterListの再設定を行っている。SortListも同様。
→そこまで重視しないかも。
→見えていないタブについては、更新しなくてもいいかもしれない。見えているかどうかは参照可能。

デモでは、セルを選択すると行選択ができるようになっている。

NatTableのバグはおいおい。

NatTableはCSSにすごく弱いので、適用するモジュール自体に修正を加える必要がある。

タブのフィルタなどは、通常のコントロールを配置している。

レイアウトファイルは、標準部分は比較的簡単に保存できる。
　ソート情報やカラムの情報などを保持する必要があるが、今のところ標準でよさそう。
　NatTableは別なので、分ける必要がある。ポップアップ画面のサイズや位置は独自かも。
　SaveLayoutではzipファイルを作成しており、LoadLayoutはtmpファイルにzipを解凍して復元している。

フォントの適用は結構頑張って適用している。

swt-data-classという属性は標準で備わっている。らしい。

MANIFEST.MFとmavenの両立は、Tychoが実現してくれる。

Tychoフレームワークでは、通常のmavenのディレクトリ構成でもよい。


